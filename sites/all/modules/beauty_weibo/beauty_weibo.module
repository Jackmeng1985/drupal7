<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Implements hook_menu().
 */
function beauty_weibo_menu() {
  $items = array();
  $items['weibo/oauth'] = array(
    'title' => 'Weibo Redirect',
    'page callback' => 'beauty_weibo_redirect',
    'access arguments' => array('access weibo api'),
    'type' => MENU_CALLBACK,
  );

  $items['weibo/oauth/callback'] = array(
    'title' => 'Authentication callback',
    'page callback' => 'beauty_weibo_callback',
    'access arguments' => array('access weibo api'),
    'type' => MENU_CALLBACK,
  );

 $items['weibo/api'] = array(
    'title' => 'Weibo api',
    'page callback' => 'beauty_weibo_api',
    'access arguments' => array('access weibo api'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/weibo'] = array(
    'title' => 'Weibo oauth settings',
    'description' => 'Configure the Weibo App Key and App Secret.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beauty_weibo_admin_settings'),
    'access arguments' => array('administer weibo'),
    'file' => 'beauty_weibo.admin.inc',
  );

  $items['beauty/ajax/weibo_get_reposts'] = array(
    'title' => 'ajax callback',
    'page callback' => 'beauty_weibo_api_ajax_get_reposts',
    'access arguments' => array('access weibo api'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function beauty_weibo_permission() {
  return array(
    'administer weibo' => array(
      'title' => t('Administer Weibo'),
      'description' => t('Configure Weibo.'),
    ),
    'access weibo api' => array(
      'title' => t('access weibo api.'),
      'description' => t('access weibo api.'),
    ),
  );
}

/**
 * Menu callback: Weibo Redirect.
 */
function beauty_weibo_redirect() {
  $parameters = array(
    'client_id' => variable_get('weibo_appkey', ''),
    'redirect_uri' => url('weibo/oauth/callback', array('absolute' => TRUE)),
    'response_type' => 'code',
  );
  $oauth_url = 'https://api.weibo.com/oauth2/authorize';
  drupal_goto($oauth_url, array('query' => $parameters));
}

/**
 * Menu callback: Weibo Callback.
 */
function beauty_weibo_callback() {
  $request = $_REQUEST;

  if (isset($request['code'])) {
    $parameters = array(
      'client_id' => variable_get('weibo_appkey', ''),
      'client_secret' => variable_get('weibo_appsecret', ''),
      'grant_type' => 'authorization_code',
      'redirect_uri' => url('weibo/oauth/callback', array('absolute' => TRUE)),
      'code' => $request['code'],
    );

    $param_data = array(
      'method' => 'POST',
      'data' => drupal_http_build_query($parameters),
    );

    $access_token_uri = 'https://api.weibo.com/oauth2/access_token';

    $http = drupal_http_request(url($access_token_uri, array('query' => $parameters)), $param_data);
    $data = drupal_json_decode($http->data);

    $access_token = $data['access_token'];

    $_SESSION['weibo']['access_token'] = $access_token;
    drupal_goto('weibo/api');
  }
}

function beauty_weibo_api() {
    return drupal_render(drupal_get_form('beauty_weibo_api_form_user_crawler')) .'<br/><br/><br/><br/>'. views_embed_view('weibo_user');
}

function beauty_weibo_api_form_user_crawler() {
    $form = array();
    $form['profile_url'] = array(
        '#type' => 'textfield',
        '#title' => '关注用户的微博地址',
    );
    $form['key'] = array(
        '#type' => 'textarea',
        '#title' => '微博关键字',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => '提交',
    );
    return $form;
}

function beauty_weibo_api_form_user_crawler_submit($form, $form_state) {
    $_SESSION['weibo']['profile_url'] = $form_state['values']['profile_url'];
    $_SESSION['weibo']['key'] = $form_state['values']['key'];
    beauty_weibo_api_process_crawler_user();
}

function beauty_weibo_api_process_crawler_user() {
    if (!isset($_SESSION['weibo']['profile_url'])) {
        return;
    }    
    $profile_url = $_SESSION['weibo']['profile_url'];
    $key = $_SESSION['weibo']['key'];
    unset($_SESSION['weibo']['profile_url']);
    unset($_SESSION['weibo']['key']);
//    $weibo_user = beauty_weibo_api_get_uid_by_profile_url($profile_url);
//
//    $already_have = db_select('beauty_weibo_user', 'bwu')->fields('bwu', array('wuid'))->condition('wuid', $weibo_user['id'], '=')->execute()->fetch();
//    if (!empty($already_have)) {
//        $e = new Exception('已经抓取了这个用户');
//        watchdog_exception('beauty', $e, '已经抓取了这个用户');
//        throw $e;
//    }
//    $weibo_user_record = new stdClass;
//    $weibo_user_record->wuid = $weibo_user['id'];
//    $weibo_user_record->wuname = $weibo_user['name'];
//    $weibo_user_record->created = time();
//    $weibo_user_record->description = beauty_weibo_api_replace4byte($weibo_user['description']);
//    $weibo_user_record->status = 1;
//    $weibo_user_record->key = $key;
//    $weibo_user_record->data = $weibo_user;
//    drupal_write_record('beauty_weibo_user', $weibo_user_record);
    $weibo_user = array('id' => 1, 'name' => 1);
    $operations = array();
    
    $weibo_user_param = array('id' => $weibo_user['id'], 'name' => $weibo_user['name']);
    $i = 1;
    while ($i <= 20) {
        $operations[] = array('batch_beauty_weibo_api_user_post_process', array($i, $weibo_user_param));
        $i++;
    }
    $uid_desc = 1;
    while ($uid_desc <= 20) {
        $page = 1;
        while ($page <= 10) {
            $operations[] = array('batch_beauty_weibo_api_user_repost_process', array($uid_desc, $page));
            $page++;
        }
        $uid_desc++;
    }
    
    $uid = 123;
    $batch = array(
        'operations' => $operations,
        'finished' => 'batch_beauty_weibo_finished',
        'title' => '抓取数据',
        'init_message' => '开始抓取数据',
        'progress_message' => '正在处理 @current 一共 @total.',
        'error_message' => '处理出错了.',
//        'file' => drupal_get_path('module', 'batch_example') . '/batch_example.inc',
    );
    batch_set($batch);
}

function batch_beauty_weibo_api_user_post_process($page, $weibo_user, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
  }
  // For this example, we decide that we can safely process
  // 5 nodes at a time without a timeout.

//    $posts = beauty_weibo_api_get_posts($weibo_user['id'], $page);
//    foreach ($posts['statuses'] as $post) {
//        $already_have = db_select('beauty_weibo_post', 'bwp')->fields('bwp', array('wid'))->condition('wid', $post['id'], '=')->execute()->fetch();
//        if (!empty($already_have)) {
//            continue;
//        }
//
//        $weibo_record = new stdClass;
//        $weibo_record->wid = $post['id'];
//        $weibo_record->wuid = $weibo_user['id'];
//        $weibo_record->wuname = $weibo_user['name'];
//        $weibo_record->wtext = beauty_weibo_api_replace4byte($post['text']);
//        $weibo_record->created = strtotime($post['created_at']);
//        $weibo_record->reposts_count = $post['reposts_count'];
//        $weibo_record->comments_count = $post['comments_count'];
//        $weibo_record->status = 0;
//        $weibo_record->data = $post;
//
//        drupal_write_record('beauty_weibo_post', $weibo_record);
//    }   
    // Store some result for post-processing in the finished callback.
  sleep(2);
    $context['results'][] = 1;
    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['message'] = t('正在抓取用户微博数据 第%number条', array('%number' => ($page - 1) * 100));
  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
    $context['finished'] = 1;
}

function batch_beauty_weibo_api_user_repost_process($uid_desc, $page, &$context) {
   $context['results'][] = 1;
    sleep(2);
    $context['sandbox']['progress']++;
    $context['message'] = t('正在抓取用户第条%post微博的第%number条转发', array('%post' => $uid_desc, '%number' => ($page - 1) * 200));
  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
    $context['finished'] = 1;    
}

function batch_beauty_weibo_finished($success, $results, $operations) {
 if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' processed.';
    $message .= theme('item_list', $results);  // D6 syntax
    drupal_set_message($message);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }    
}

function beauty_weibo_api_ajax_get_reposts($id) {

//        $id = beauty_weibo_api_get_midstr($_SESSION['weibo']['idstr']);
    $reposts_result = beauty_weibo_api_get_reposts($id);
    $author_post = beauty_weibo_api_get_author_post_by_reposts($id, $reposts_result['reposts']);

    if (empty($reposts_result['reposts'])) {
        drupal_json_output(array('status' => FALSE, 'message' => '找不到转发数据'));die();
    }
    $i = 1;
    foreach ($reposts_result['reposts'] as $repost) {
        $already_have = db_select('beauty_weibo_repost', 'bwr')->fields('bwr', array('wid'))->condition('wid', $repost['id'], '=')->execute()->fetch();
        if (!empty($already_have)) {
            continue;
        }

        $repost_record = new stdClass;
        $repost_record->rwid = $id;
        $repost_record->ruid = $author_post['user']['id'];
        $repost_record->wid = $repost['id']; // id <> mid ?
        $repost_record->rrwid = $repost['retweeted_status']['id'];
        $repost_record->text = beauty_weibo_api_replace4byte($repost['text']);
        $repost_record->source = $repost['source'];
        $repost_record->reposts_count = $repost['reposts_count'];
        $repost_record->comments_count = $repost['comments_count'];
        $repost_record->uid = $repost['user']['id'];
        $repost_record->name = $repost['user']['name'];

        $location = explode(' ', $repost['user']['location']);
        $repost_record->location_province = $location[0];
        $repost_record->location_city = isset($location[1]) ? $location[1] : '';

        $repost_record->url = $repost['user']['url'];
        $repost_record->profile_image_url = $repost['user']['profile_image_url'];
        $repost_record->gender = $repost['user']['gender'];
        $repost_record->followers_count = $repost['user']['followers_count'];
        $repost_record->friends_count = $repost['user']['friends_count'];
        $repost_record->favourites_count = $repost['user']['favourites_count'];
        $repost_record->statuses_count = $repost['user']['statuses_count'];
        $repost_record->following = (int) $repost['user']['following'];
        $repost_record->verified = (int) $repost['user']['verified'];
        $repost_record->created = $repost['user']['name'];
        $repost_record->created = strtotime($repost['created_at']);
        $repost_record->data = $repost;
        
        $repost_record->status = beauty_weibo_api_get_navy($repost['user']);
        drupal_write_record('beauty_weibo_repost', $repost_record);
        $i++;
    }
    db_merge('beauty_weibo_post')->key(array('wid' => $id))->fields(array('status' => 1))->execute();
    drupal_json_output(array('status' => TRUE, 'message' => "成功抓取{$i}条数据"));die();
}
function beauty_weibo_api_get_reposts($mid) {

    $api = 'https://api.weibo.com/2/statuses/repost_timeline.json';
    $param = array(
        'access_token' => $_SESSION['weibo']['access_token'],
        'id' => $mid,
        'count' => 200
    );
    $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
    $result = drupal_json_decode($result_json);
    if ($result['total_number'] > 200) {
        $multi = $result['total_number'] / 200;
        $multi = ceil($multi);
        $multi = $multi > 9 ? 9 : $multi;
        for ($i = 1; $i < $multi; $i++) {
            $param = array(
                'access_token' => $_SESSION['weibo']['access_token'],
                'id' => $mid,
                'count' => 200,
                'page' => $i + 1
            );
            $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
            $result_for = drupal_json_decode($result_json);
            if (count($result_for['reposts']) > 0 ) {
                $result['reposts'] = array_merge($result['reposts'], $result_for['reposts']);
            }
        }
    }
    return $result;
}


function beauty_weibo_api_get_posts($uid, $page = null) {
    if (empty($page)) {
       $page = 1; 
    }
    else {
        $have_page_param = TRUE;
    }
    $api = 'https://api.weibo.com/2/statuses/home_timeline.json';
    $param = array(
        'access_token' => $_SESSION['weibo']['access_token'],
        'uid' => $uid,
        'count' => 100,
        'page' => $page
    );
    $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
    $result = drupal_json_decode($result_json);
    
    if ($have_page_param) {
        return $result;
    }
    
    if ($result['total_number'] > 100) {
        $multi = $result['total_number'] / 100;
        $multi = ceil($multi);
        $multi = $multi > 19 ? 19 : $multi;
        for ($i = 1; $i < $multi; $i++) {
            $param = array(
                'access_token' => $_SESSION['weibo']['access_token'],
                'uid' => $uid,
                'count' => 100,
                'page' => $i + 1
            );
            $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
            $result_for = drupal_json_decode($result_json);
            $result['statuses'] = array_merge($result['statuses'], $result_for['statuses']);
        }
    }
    return $result;
}
function beauty_weibo_api_get_midstr($midstr) {
    $mid_api = 'http://api.t.sina.com.cn/queryid.json';

    $mid_json = file_get_contents($mid_api . '?mid=' . $midstr . '&isBase62=1&type=2');
    $mid_json = drupal_json_decode($mid_json);
    return $mid_json['id'];
}

function beauty_weibo_api_get_mid($mid) {
    $mid_api = 'http://api.t.sina.com.cn/querymid.json';

    $mid_json = file_get_contents($mid_api . '?id=' . $mid);
    $mid_json = drupal_json_decode($mid_json);
    return $mid_json['mid'];
}

function beauty_weibo_api_get_author_post_by_reposts($id , $reposts) {
    foreach ($reposts as $repost) {
        if ($repost['retweeted_status']['id'] == $id) {
            return $repost['retweeted_status'];
        }
    }
    return FALSE;
}

function beauty_weibo_api_get_navy($weibo_user) {

    if ($weibo_user['friends_count'] > $weibo_user['followers_count'] * 3) {
        return 1;
    } 
    if ($weibo_user['statuses_count'] > 100 && $weibo_user['favourites_count '] == 0) {
        return 1;
    }
    return 0;
}

function beauty_weibo_api_get_uid_by_domain($domain) {
    $api = 'https://api.weibo.com/2/users/domain_show.json';
    $param = array(
        'access_token' => $_SESSION['weibo']['access_token'],
        'domain' => $domain,
    );
    $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
    $result = drupal_json_decode($result_json);

    return $result;
}

function beauty_weibo_api_get_user_by_uid($uid) {
    $api = 'https://api.weibo.com/2/users/show.json';
    $param = array(
        'access_token' => $_SESSION['weibo']['access_token'],
        'uid' => $uid,
    );
    $result_json = file_get_contents($api .'?' . drupal_http_build_query($param));
    $result = drupal_json_decode($result_json);
    return $result;
}

function beauty_weibo_api_get_uid_by_profile_url($profile_url) {
    $url = parse_url($profile_url);
    $url = $url['path'];
    $arg1 = arg(1, $url);
    $arg2 = arg(2, $url);
    if ($arg1 == 'u' && !empty($arg2)) {
        $user = beauty_weibo_api_get_user_by_uid($arg2);
    } elseif ($arg1 && empty($arg2)) {
        $user = beauty_weibo_api_get_uid_by_domain($arg1);
    }
    else {
        $e = new Exception('你给的url不符合规范');
        watchdog_exception('beauty', $e, '你给的url不符合规范');
        throw $e;
    }
    return $user;
}



function beauty_weibo_api_replace4byte($string) {
    return preg_replace('%(?:
          \xF0[\x90-\xBF][\x80-\xBF]{2}      # planes 1-3
        | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
        | \xF4[\x80-\x8F][\x80-\xBF]{2}      # plane 16
    )%xs', '', $string);
}

/**
 *
 */
function beauty_weibo_custom_theme(){
    if (arg(0) == 'weibo') {
        return 'rubik';
    }
}


/**
 * Implements hook_views_api().
 */
function beauty_weibo_views_api() {
  return array(
    'api' => 3,
    'template path' => drupal_get_path('module', 'beauty_weibo') . '/themes',
  );
}

/**
 * Implements hook_init().
 */
function beauty_weibo_init() {
    if (arg(0) == 'weibo' && arg(1) == 'posts' && is_numeric(arg(2))) {
        drupal_add_js(drupal_get_path('module', 'beauty_weibo') . '/js/ajax_reposts.js');
    }
}
